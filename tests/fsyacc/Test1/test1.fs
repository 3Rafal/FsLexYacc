// Implementation file for parser generated by fsyacc
#light "off"
module TestParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"

//module TestParser
//Bug1885: is about skipping // comments in the header and code sections, rather than lexing as tokens
//Bug1885: REPRO: Convert a string such as "\"c:\\windows\\\"" into "c:\windows\" 
open Microsoft.FSharp.Compatibility.OCaml

# 14 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IDENT of (string)
  | MINUS
  | STAR
  | LPAREN
  | RPAREN
  | PLUS
  | EOF
  | LET
  | IN
  | END
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_EOF
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_decl
    | NONTERM_expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IDENT _ -> 0 
  | MINUS  -> 1 
  | STAR  -> 2 
  | LPAREN  -> 3 
  | RPAREN  -> 4 
  | PLUS  -> 5 
  | EOF  -> 6 
  | LET  -> 7 
  | IN  -> 8 
  | END  -> 9 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IDENT 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_STAR 
  | 3 -> TOKEN_LPAREN 
  | 4 -> TOKEN_RPAREN 
  | 5 -> TOKEN_PLUS 
  | 6 -> TOKEN_EOF 
  | 7 -> TOKEN_LET 
  | 8 -> TOKEN_IN 
  | 9 -> TOKEN_END 
  | 12 -> TOKEN_end_of_input
  | 10 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_decl 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 12 
let _fsyacc_tagOfErrorTerminal = 10

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IDENT _ -> "IDENT" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | PLUS  -> "PLUS" 
  | EOF  -> "EOF" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | END  -> "END" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 17us; 18us; 7us; 65535us; 0us; 2us; 4us; 5us; 11us; 6us; 12us; 7us; 13us; 8us; 14us; 9us; 19us; 10us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 3us; 4us; 5us; 1us; 1us; 1us; 2us; 4us; 2us; 3us; 4us; 5us; 4us; 3us; 3us; 4us; 5us; 4us; 3us; 4us; 4us; 5us; 4us; 3us; 4us; 5us; 5us; 4us; 3us; 4us; 5us; 6us; 4us; 3us; 4us; 5us; 8us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 18us; 23us; 28us; 33us; 38us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; |]
let _fsyacc_action_rows = 21
let _fsyacc_actionTableElements = [|3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 0us; 49152us; 4us; 32768us; 1us; 11us; 2us; 13us; 5us; 12us; 6us; 3us; 0us; 16385us; 3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 3us; 16386us; 1us; 11us; 2us; 13us; 5us; 12us; 3us; 16387us; 1us; 11us; 2us; 13us; 5us; 12us; 1us; 16388us; 2us; 13us; 0us; 16389us; 4us; 32768us; 1us; 11us; 2us; 13us; 4us; 15us; 5us; 12us; 4us; 32768us; 1us; 11us; 2us; 13us; 5us; 12us; 9us; 20us; 3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 0us; 16390us; 0us; 16391us; 1us; 32768us; 0us; 4us; 1us; 32768us; 8us; 19us; 3us; 32768us; 0us; 16us; 3us; 14us; 7us; 17us; 0us; 16392us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 10us; 11us; 15us; 19us; 23us; 25us; 26us; 31us; 36us; 40us; 44us; 48us; 52us; 53us; 54us; 56us; 58us; 62us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 3us; 3us; 3us; 3us; 1us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 16391us; 65535us; 65535us; 65535us; 16392us; |]
let _fsyacc_reductions ()  =    [| 
# 134 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Tree.tree)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 143 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                       _1 
                   )
# 18 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : Tree.tree));
# 154 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                        Tree.Node("decl",[_2]) 
                   )
# 20 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'decl));
# 166 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                              Tree.Node("-",[_1;_3]) 
                   )
# 22 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'expr));
# 178 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                         Tree.Node("+",[_1;_3]) 
                   )
# 23 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'expr));
# 190 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                         Tree.Node("*",[_1;_3]) 
                   )
# 24 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'expr));
# 202 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                             _2 
                   )
# 25 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'expr));
# 213 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                Tree.Node(_1,[]) 
                   )
# 26 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'expr));
# 224 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                                               _4 
                   )
# 27 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.mly"
                 : 'expr));
|]
# 237 "C:\Users\phcart\source\repos\FsLexYacc\tests\fsyacc\Test1\test1.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Tree.tree =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
